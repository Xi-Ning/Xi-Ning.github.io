(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{356:function(a,s,t){a.exports=t.p+"assets/img/SJIA-001-01.06ae338a.jpg"},397:function(a,s,t){"use strict";t.r(s);var n=t(33),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_1-为什么要关心java-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要关心java-8"}},[a._v("#")]),a._v(" 1 为什么要关心Java 8")]),a._v(" "),n("Seal",{attrs:{type:"2",title:"Java 8 实战",author:"（英）Raoul-Gabriel Urma（意）Mario Fusco（英）Alan Myscroft",translator:"陆明刚，劳佳",publisher:"人民邮电出版社",publishDate:"2016.04",createDate:"2021.11.27",modifyDate:"2021.11.29",footer:"竢实扬华 · 自强不息"}}),a._v(" "),n("blockquote",[n("p",[a._v("Java8发布时间：2014年3月")])]),a._v(" "),n("h2",{attrs:{id:"_1-1-java怎么还在变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java怎么还在变"}},[a._v("#")]),a._v(" 1.1 Java怎么还在变")]),a._v(" "),n("h3",{attrs:{id:"_1-1-1-编程语言生态系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-编程语言生态系统"}},[a._v("#")]),a._v(" 1.1.1 编程语言生态系统")]),a._v(" "),n("p",[a._v("编程语言就像生态系统一样，新的语言会出现，旧语言则被替代，除非它们不断演变。")]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("备注")]),a._v(" "),n("p",[a._v("在现实中没有完美的通用语言，某些语言只是更合适某些方面。")]),a._v(" "),n("p",[a._v("比如：C和C++仍然是构建操作系统和各种嵌入式系统的流行工具，因为它们编出的程序尽管安全性不佳，但运行时占用资源少。")])]),a._v(" "),n("p",[a._v("编程语言生态系统的气候正在变化，程序员越来越多的要处理所谓的"),n("span",{staticClass:"stress"},[a._v("大数据")]),a._v("，并希望利用多核计算机（Java此前并不支持并行处理）或计算集群来有效的处理。")]),a._v(" "),n("p",[a._v("新语言不断出现，虽然为了一个功能而改用新的语言和工具链往往太过痛苦，但因为新语言迅速适应了气候变化而越来越受欢迎，新语言最终会取代现有的语言，除非后者演变得够快，能跟得上节奏。")]),a._v(" "),n("p",[a._v("Java 8对于程序员的主要好处在于它提供了更多的编程工具和概念，能以更快，更重要的是能以更简洁、更易于维护的方式解决新的或现有的编程问题。")]),a._v(" "),n("h3",{attrs:{id:"_1-1-2-三个编程概念以及背后的思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-三个编程概念以及背后的思想"}},[a._v("#")]),a._v(" 1.1.2 三个编程概念以及背后的思想")]),a._v(" "),n("h4",{attrs:{id:"_1-1-2-1-流处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-1-流处理"}},[a._v("#")]),a._v(" 1.1.2.1 流处理")]),a._v(" "),n("p",[a._v("流是一系列数据项，一次只生成一项。")]),a._v(" "),n("p",[a._v("程序可以从输入流中一个一个读取数据库，然后以统一的方式将数据项写入输出流。一个程序的输出流很可能是另一个程序的输入流。")]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("举例")]),a._v(" "),n("p",[a._v("Unix或Linux命令可以通过管道（|）将多个程序连接在一起：")]),a._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" file1 file2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("tr")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[A-Z]"')]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[a-z]"')]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -3\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])])]),a._v(" "),n("p",[a._v("基于这种思想，Java 8在"),n("code",[a._v("java.util.stream")]),a._v("中添加了一个Stream API，可以在更高的抽象层次上写程序了，思路变成了把这样的流变成那样的流，而不是一次只处理一个项目。")]),a._v(" "),n("p",[a._v("另一个好处是，Java 8可以透明地把输入的不相关部分拿到几个CPU内核上去分别执行Stream操作流水线。")]),a._v(" "),n("h4",{attrs:{id:"_1-1-2-2-用行为参数化把代码传递给方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-2-用行为参数化把代码传递给方法"}},[a._v("#")]),a._v(" 1.1.2.2 用行为参数化把代码传递给方法")]),a._v(" "),n("p",[a._v("在Java 8之前，使用"),n("code",[a._v("sort")]),a._v("方法进行排序，需要创建一个"),n("code",[a._v("Comparator")]),a._v("对象传递给"),n("code",[a._v("sort")]),a._v("方法，而不能直接传递排序的逻辑代码，这种做法不仅仅有点啰嗦，而且让“重复使用现有行为”的思想变得不那么清楚了。")]),a._v(" "),n("p",[a._v("Java 8中增加的了通过API来传递代码的能力，也就是行为参数化。Stram API就是构建在通过传递代码使操作行为实现参数化的思想上的。")]),a._v(" "),n("h4",{attrs:{id:"_1-1-2-3-并行与共享的可变数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-3-并行与共享的可变数据"}},[a._v("#")]),a._v(" 1.1.2.3 并行与共享的可变数据")]),a._v(" "),n("p",[a._v("Java 8的流处理是并行的，它要求传递给流方法的行为必须能够同时对不同的输入安全的执行，也就是代码不能访问共享的可变数据。")]),a._v(" "),n("blockquote",[n("p",[a._v("满足上述要求的函数也被称为“纯函数”、或“无副作用函数”，或“无状态函数”。")])]),a._v(" "),n("p",[a._v("Java 8的流实现并行比Java现有的线程API更容易。")]),a._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("synchronized")]),a._v(" "),n("p",[a._v("尽管可以使用"),n("code",[a._v("synchronized")]),a._v("来打破“不能有共享的可变数据”这一规则，但这相当于是在和整个体系作对，因为它使所有围绕这一规则做出的优化都是去意义了。")]),a._v(" "),n("p",[a._v("在多个处理器内核之间使用"),n("code",[a._v("synchronized")]),a._v("，其代价往往比预期要大得多，因为同步迫使代码按照顺序执行，而这与并行处理的宗旨相悖。")])]),a._v(" "),n("p",[a._v("没有共享的可变数据，以及将方法和函数即代码传递给其他方法的能力，这两个要点是函数式编程范式的基石。")]),a._v(" "),n("h3",{attrs:{id:"_1-1-3-java需要演变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-java需要演变"}},[a._v("#")]),a._v(" 1.1.3 Java需要演变")]),a._v(" "),n("p",[a._v("Java 8中的主要变化反映了它开始远离侧重改变现有值的经典面向对象思想，而向函数式编程领域转变。")]),a._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),n("p",[a._v("极端来说，传统的面向对象编程和函数式可能看起来是冲突的，但我们的理念是获得两种编程范式中最好的东西。")])]),a._v(" "),n("p",[a._v("语言需要不断改进以跟进硬件的更新或满足程序员的期待。")]),a._v(" "),n("h2",{attrs:{id:"_1-2-java中的函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java中的函数"}},[a._v("#")]),a._v(" 1.2 Java中的函数")]),a._v(" "),n("h3",{attrs:{id:"_1-2-1-让方法成为一等公民"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-让方法成为一等公民"}},[a._v("#")]),a._v(" 1.2.1 让方法成为一等公民")]),a._v(" "),n("p",[a._v("编程语言的整个目的就在于操作值，因此值被称作为一等公民。编程语言中的其他结构在程序执行期间不能传递，因而是二等公民。")]),a._v(" "),n("p",[a._v("让方法等概念作为一等公民可以扩充程序员的工具库，从而让编程变得更容易。")]),a._v(" "),n("p",[a._v("Java 8允许方法作为值，这也构成了其他若干Java 8新功能的基础。")]),a._v(" "),n("h3",{attrs:{id:"_1-2-2-方法引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-方法引用"}},[a._v("#")]),a._v(" 1.2.2 方法引用")]),a._v(" "),n("p",[a._v("筛选一个目录中的所有隐藏文件，在Java 8之前只能这样实现：")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" hiddenFiles "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("listFiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),a._v(" file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("isHidden")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("Java 8中可以使用"),n("span",{staticClass:"stress"},[a._v("方法引用")]),a._v("（即把这个方法作为值，语法为"),n("code",[a._v("::")]),a._v("），将代码重构：")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" hiddenFiles "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("listFiles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("isHidden")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("h3",{attrs:{id:"_1-2-3-lambda"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-lambda"}},[a._v("#")]),a._v(" 1.2.3 Lambda")]),a._v(" "),n("p",[a._v("除了允许命名函数成为一等公民外，Java 8还体现了更为广义的将函数作为值的思想，包括"),n("span",{staticClass:"stress"},[a._v("Lambda（或匿名函数）")]),a._v("。")]),a._v(" "),n("p",[a._v("比如将入参x加1返回的函数，可以做一个MyMathUtils工具类，在里面定义一个add1方法，然后通过"),n("code",[a._v("MyMathUtils::add1")]),a._v("将方法作为值传递，但这样不够简洁，且很多时候没有很方便的类和方法可用（起名也是件令人头疼的事情），此时可以使用Lambda：")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("h2",{attrs:{id:"_1-3-流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-流"}},[a._v("#")]),a._v(" 1.3 流")]),a._v(" "),n("p",[a._v("Stream API解决了两个问题：集合处理时的套路和晦涩，以及难以利用多核。")]),a._v(" "),n("p",[a._v("这样设计的原因是：有许多反复出现的数据处理模式，且这些操作常常可以并行化。")]),a._v(" "),n("h3",{attrs:{id:"_1-3-1-简化集合处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-简化集合处理"}},[a._v("#")]),a._v(" 1.3.1 简化集合处理")]),a._v(" "),n("p",[a._v("几乎每一个Java应用都会制造和处理集合，但集合使用起来并不总是那么理想。比如，需要从交易列表中筛选出大额交易并按货币分组，需要写一大堆套路化的代码来实现数据的处理，集合的遍历以及多个嵌套的控制流指令，让人很难一眼看出来这一大段代码是做什么的。")]),a._v(" "),n("p",[a._v("Java 8的Stream API解决了这个问题：")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Currency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Transaction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" transactionsByCurrencies "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" \n    transactions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Transaction")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getPrice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("collect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("groupingBy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Transaction")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("getCurrency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("外部迭代与内部迭代")]),a._v(" "),n("p",[a._v("使用集合时，需要循环一个个去迭代元素、处理元素，这种数据迭代的方法称为外部迭代。")]),a._v(" "),n("p",[a._v("Stream API则不用关心循环的事情，数据处理完全在库内部进行，这种思想称为内部迭代。")])]),a._v(" "),n("h3",{attrs:{id:"_1-3-2-利用多核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-利用多核"}},[a._v("#")]),a._v(" 1.3.2 利用多核")]),a._v(" "),n("p",[a._v("经典的Java程序只能利用计算机的一个核，其他核的处理能力都浪费了。")]),a._v(" "),n("p",[a._v("多线程并非易事，通过多线程代码来利用并行，线程很可能会同时访问并更新共享变量，如果没有协调好（传统上利用"),n("code",[a._v("synchronized")]),a._v("关键字进行协调，但误用很可能导致很多难以察觉的错误），数据可能会被以外改变。")]),a._v(" "),n("p",[a._v("Java 8基于Stream的并行提倡很少使用"),n("code",[a._v("synchronized")]),a._v("的函数式编程风格，Stream关注数据分块而不是协调访问。Stream利用多核的例子如下图：")]),a._v(" "),n("p",[n("img",{attrs:{src:t(356),alt:""}})]),a._v(" "),n("blockquote",[n("p",[a._v("集合Collection主要是为了存储和访问数据，而Stream则主要用于描述对数据的计算。")])]),a._v(" "),n("p",[a._v("筛选一个集合最快的方法常常是将集合转换为Stream，进行并行处理，然后再转换回集合。")]),a._v(" "),n("h2",{attrs:{id:"_1-4-默认方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-默认方法"}},[a._v("#")]),a._v(" 1.4 默认方法")]),a._v(" "),n("p",[a._v("在加入新功能时，Java 8的设计者发现了一个现实的问题：现有的接口也在改进，如果更新了一个接口，那么所有实现它的类也都意味着要进行更新，这简直是逻辑灾难。")]),a._v(" "),n("p",[a._v("如何改变已发布的接口而不破坏已有的实现呢？默认方法（使用"),n("code",[a._v("default")]),a._v("关键字）解决了这个问题。")]),a._v(" "),n("p",[a._v("Java 8的接口如今可以包含实现类没有提供实现的方法签名了，缺失的方法主体随接口提供（也就是接口中有默认实现），而不需由实现类提供。")]),a._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[a._v("多继承")]),a._v(" "),n("p",[a._v("一个类可以实现多个接口，而接口中含有默认实现，这意味着Java有了某种形式的多继承。")])]),a._v(" "),n("h2",{attrs:{id:"_1-5-函数式编程的一些思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-函数式编程的一些思想"}},[a._v("#")]),a._v(" 1.5 函数式编程的一些思想")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("将方法和Lambda作为一等公民")])]),a._v(" "),n("li",[n("p",[a._v("在没有可变共享状态时，函数或方法可以有效、安全地并行执行")])]),a._v(" "),n("li",[n("p",[a._v("通过使用更多的描述性数据类型来避免null")])])]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("Optional<T>")]),a._v(" "),n("p",[a._v("Java 8的"),n("code",[a._v("Optional<T>")]),a._v("是一个容器对象，可以包含或不包含一个值，内部有方法来明确处理值不存在的情况，也就避免了空指针异常。")]),a._v(" "),n("p",[a._v("换句话说，它使用类型系统，允许表明我们知道一个变量可能没有值。")])]),a._v(" "),n("ul",[n("li",[a._v("匹配模式")])]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("匹配模式")]),a._v(" "),n("p",[a._v("模式匹配可以比"),n("code",[a._v("if-then-else")]),a._v("更简明的表达编程思想。")]),a._v(" "),n("p",[a._v("也可以使用多态和方法重载来替代"),n("code",[a._v("if-then-else")]),a._v("，但与模式匹配相比，哪种方式更适合，仍有一些争论。")]),a._v(" "),n("p",[a._v("模式匹配可以看做是"),n("code",[a._v("switch")]),a._v("的扩展形式，Java 8对其支持并不完全。")])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);